import org.apache.commons.io.FileUtils
import org.apache.commons.lang3.StringUtils
import org.apache.commons.lang3.SystemUtils
import org.gitlab4j.api.GitLabApi
import org.gitlab4j.api.models.User
import org.taruts.processUtils.ProcessRunner
import reactor.netty.http.client.HttpClient
import reactor.netty.http.client.HttpClientResponse
import reactor.netty.http.client.PrematureCloseException
import reactor.util.Loggers

import java.time.Duration
import java.util.regex.Matcher
import java.util.stream.Collectors
import java.util.stream.Stream

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = 's3MavenRepo'
            url = 's3://maven.taruts.net'
            credentials(AwsCredentials)
        }
    }
    dependencies {
        classpath 'io.projectreactor.netty:reactor-netty-http:1.0.18'
        classpath 'org.slf4j:slf4j-simple:1.7.36'
        classpath 'org.apache.commons:commons-lang3:3.12.0'
        classpath 'commons-io:commons-io:2.11.0'
        classpath 'com.google.guava:guava:31.1-jre'
        classpath 'we:process-utils:001'
        classpath 'we:git-utils:001'
        classpath 'javax.inject:javax.inject:1'
        classpath 'org.gitlab4j:gitlab4j-api:5.0.1'
        classpath 'io.netty:netty-transport-native-unix-common:4.1.74.Final'
    }
}

class MountPoints {
    static String CONFIG = '/etc/gitlab'
    static String LOGS = '/var/log/gitlab'
    static String DATA = '/var/opt/gitlab'
}

static def addBindMounts(List<String> command, Project project) {
    String home = FileUtils.getFile(project.projectDir, 'home').canonicalPath
    command.addAll(
        List.of(
            '--volume', "$home/config:${MountPoints.CONFIG}".toString(),
            '--volume', "$home/logs:${MountPoints.LOGS}".toString(),
            '--volume', "$home/data:${MountPoints.DATA}".toString(),
        )
    )
}

tasks.register('createContainer') {
    it.group = 'gitlab-container'
    it.timeout = Duration.ofMinutes(15)
    it.dependsOn('removeAll')
    it.doLast {

        GitLabParameters gitLabParameters = GitLabParameters.getGitLabParameters(project, 'application-dynamic-local.properties')

        List<String> command = new ArrayList<>()

        command.addAll(
            List.of(
                'docker', 'run',
                '--detach',
                '--hostname', 'gitlab.domain.name.placeholder',
                '--publish', '9522:22',
                '--publish', "${gitLabParameters.gitlabUri.port}:80".toString(),
                '--publish', '9543:443',
                '--name', 'gitlab.taruts.net',
                '--restart', 'always',
                '--shm-size', '256m'
            )
        )

        addBindMounts(command, project)

        if (SystemUtils.IS_OS_LINUX) {
            command.addAll(
                List.of(
                    '--add-host', 'host.docker.internal:host-gateway'
                )
            )
        }

        command.add('gitlab/gitlab-ce:14.10.2-ce.0')

        ProcessRunner.runProcess(project.projectDir, command)

        Loggers.useSl4jLoggers()

        HttpClient httpClient = HttpClient
            .create()
            .compress(true)
            .baseUrl(gitLabParameters.gitlabUri.toString())

        // reactor-netty-http spams warnings when throwing exceptions
        logging.levelInternal = LogLevel.ERROR

        while (true) {
            try {
                try {
                    HttpClientResponse response = httpClient
                        .get()
                        .response()
                        .block(Duration.ofSeconds(10))

                    int code = response.status().code()
                    if (code >= 200 && code < 400) {
                        break
                    }
                } catch (Exception e) {
                    // Unwrapping the cause if exists
                    throw e.cause == null ? e : e.cause
                }
            } catch (PrematureCloseException | ConnectException | io.netty.channel.unix.Errors.NativeIoException ignored) {
            } catch (Exception e) {
                logger.error(">>> ${e.class.name}: ${e.message}")
                throw e
            }
        }
    }
}

tasks.register('createUser') {
    it.group = 'gitlab-container'
    it.doLast {

        String fileContents = runLinuxShellCommandInDocker(project, "cat ${MountPoints.CONFIG}/initial_root_password")

        List<String> lines = fileContents.readLines()

        String password = lines
            .stream()
            .map(line -> line =~ /Password:\s?(.+)/)
            .filter(Matcher::find)
            .map(matcher -> matcher.group(1))
            .findAny()
            .orElseThrow(() -> new RuntimeException('Password not found'))

        GitLabParameters gitLabParameters = GitLabParameters.getGitLabParameters(project, 'application-dynamic-local.properties')

        GitLabApi gitLabApi = GitLabApi.oauth2Login(gitLabParameters.gitlabUri.toString(), 'root', password, true)

        User user = new User()
        user.username = gitLabParameters.username
        user.name = gitLabParameters.username
        user.email = "${gitLabParameters.username}@mail.com"
        user.isAdmin = true
        user.canCreateGroup = true
        user.projectsLimit = 0
        user.sharedRunnersMinutesLimit = 0
        user.skipConfirmation = true

        gitLabApi.userApi.createUser(user, gitLabParameters.password, false)
    }
}

tasks.register('createAll') {
    it.group = 'gitlab-container'
    it.dependsOn('createContainer', 'createUser')
}

tasks.register('startContainer') {
    it.group = 'gitlab-container'
    it.doLast {
        ProcessRunner.runProcess(
            project.projectDir,
            'docker', 'container', 'start', 'gitlab.taruts.net'
        )
    }
}

boolean containerExists() {
    // println('containerExists')
    String containerId = ProcessRunner.runProcess(
        project.projectDir,
        'docker', 'container', 'ls',
        '-q',
        '-a',
        '-f', 'name=gitlab.taruts.net'
    )
    // println("containerId=$containerId")
    return StringUtils.isNotBlank(containerId)
}

tasks.register('stopContainer') {
    it.group = 'gitlab-container'
    it.doLast {
        // println('stopContainer. Start')
        if (containerExists()) {
            // println('containerExists() == true')

            String output = ProcessRunner.runProcess(
                project.projectDir,
                'docker', 'container', 'stop', 'gitlab.taruts.net'
            )

            // println("Docker output: $output")
        }
        // println('stopContainer. End')
    }
}

tasks.register('removeContainer') {
    it.group = 'gitlab-container'
    it.dependsOn('stopContainer')
    it.doLast {
        if (containerExists()) {
            ProcessRunner.runProcess(
                project.projectDir,
                'docker', 'container', 'rm', '--volumes', 'gitlab.taruts.net'
            )
        }
    }
}

static String runLinuxShellCommandInDocker(Project project, String shellCommand) {
    List<String> command = new ArrayList<>()
    command.addAll(
        List.of(
            'docker', 'run', '--rm'
        )
    )
    addBindMounts(command, project)

    command.add('alpine:3.16.0')

    command.addAll(List.of(
        'sh', '-c', "\"$shellCommand\"".toString()
    ))

    return ProcessRunner.runProcess(project.projectDir, command)
}

tasks.register('removeContainerData') {
    it.group = 'gitlab-container'
    it.shouldRunAfter('removeContainer')
    it.doLast {
        File homeHostDirectory = FileUtils.getFile(project.projectDir, 'home')
        if (!homeHostDirectory.exists()) {
            return
        }

        String directoryWildcards = Stream
            .of(MountPoints.CONFIG, MountPoints.LOGS, MountPoints.DATA)
            .map { mountPoint ->
                String visibleFilesWildcard = "$mountPoint/*"
                // <dot><not dot><etc>
                // .git - counts
                // . and .. - not
                String hiddenFilesWildcard = "$mountPoint/.[!.]*"
                return "$visibleFilesWildcard $hiddenFilesWildcard"
            }
            .collect(Collectors.joining(' '))
        String shellCommand = "rm -rf $directoryWildcards"
        runLinuxShellCommandInDocker(project, shellCommand)

        FileUtils.deleteDirectory(homeHostDirectory)
    }
}

tasks.register('removeAll') {
    it.group = 'gitlab-container'
    it.dependsOn('removeContainer', 'removeContainerData')
}
